/**
 * This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
 */
generator client {
    provider      = "prisma-client-js"
    output        = "../node_modules/.prisma/client"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id       String @id() @default(nanoid())
    username String @unique(map: "uq_user_username")
    password String

    authorizations Authorization[]
    tokens         Token[]

    @@map(name: "users")
}

model Authorization {
    authorizationCode String   @id() @default(nanoid()) @map(name: "authorization_code")
    codeChallenge     String   @map(name: "code_challenge")
    state             String
    redirectUrl       String   @map(name: "redirect_url")
    userId            String?
    createdAt         DateTime @updatedAt() @map(name: "created_at")

    user User? @relation(fields: [userId], references: [id], map: "fk_user_authorization")

    @@map(name: "authorizations")
}

enum TokenType {
    ACCESS
    REFRESH
}

model Token {
    jti String    @id() @default(nanoid())
    pti String?
    sub String
    iat DateTime
    exp DateTime
    nbf DateTime?
    aud String
    iss String
    rvk Boolean
    tpe TokenType

    parentToken Token?  @relation(name: "parentToken", fields: [pti], references: [jti], map: "fk_token_parent_token")
    childTokens Token[] @relation(name: "parentToken")
    user        User    @relation(fields: [sub], references: [id], map: "fk_user_token")

    @@map(name: "tokens")
}

model Key {
    kid        String  @id()
    publicKey  String? @map(name: "public_key") @db.LongText
    privateKey String? @map(name: "private_key") @db.LongText
    clientId   String

    client Client @relation(fields: [clientId], references: [id], map: "fk_client_keys", onDelete: Cascade)

    @@map(name: "keys")
}

model Client {
    id       String @id() @default(nanoid())
    audience String @unique(map: "uq_client_audience")

    redirectURLs RedirectURL[]
    keys         Key[]

    @@map(name: "clients")
}

model RedirectURL {
    url      String
    clientId String

    client Client @relation(fields: [clientId], references: [id], map: "fk_client_redirect_url", onDelete: Cascade)

    @@id(fields: [url, clientId])
    @@map(name: "redirect_urls")
}
